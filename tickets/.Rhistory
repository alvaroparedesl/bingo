par(new = TRUE)
xmin <- as.numeric(colnames(dat)[i])
ymax <- xmin + 1
ser <- as.vector(dat[,i])   #putting right and left sides of rectangles
ser <- ser/maxscale * plot_scale    #scaleing... sometimes it is nice make things bigger or smaller
if(sum(abs(ser)) != 0){          #if there is lf data at time i make plot
rectplot(ser,bins=as.numeric(rownames(dat)),xmin=xmin,xmax=xmax,ylim=ylim, "blue", "grey")#make bar plot
}
}
}
#### ----------------- Functions ------------------------ #####
rectplot <- function(ser,bins,xmin,xmax,ylim,barcol1,barcol2){
#This function puts the rectangles in the histo_line function
YL=bins[1:(length(bins))]-(bins[2]-bins[1])/2           #lower y limits
YU=bins[1:(length(bins))]+(bins[2]-bins[1])/2           #upper y limits
XL=ser+xmin                         #nonzero x limits may be right or left!
XR=ser*0+xmin                       #axis x limits
col1 <- which(XL-xmin<=0)#switch peaks and valley colors
col2 <- which(XL-xmin>=0)
rect(XL[col1],YL[col1],XR[col1],YU[col1],col=barcol1)#make valley boxes
rect(XL[col2],YL[col2],XR[col2],YU[col2],col=barcol2)#make peak boxes
}
histo_line <- function(dat, ...) {
#' Plot function
#'
#' @param dat A matrix, with bins as rows, time as columns and frequency as values.
#' rownames should be the name of the bins and colnames the name of the time (tested with age, not dates).
#' Both must be numeric.
#' @param ... Additional arguments passed to plot (as xlab, ylab, main)
#'
#' @details
#' https://science.nature.nps.gov/im/datamgmt/statistics/r/rcourse/session1.cfm
#' https://github.com/AaronGreenberg/ELEFAN/blob/master/R/LF_plots.R
#' https://rawgit.com/tokami/TropFishR/master/inst/doc/tutorial.html
xlim <- c(0, max(as.numeric(colnames(dat))) + 1)
ylim <- c(1, max(as.numeric(rownames(dat))) + 1)
maxscale <- (max(dat)/sort(unique(as.vector(dat)))[2]*1.1)
par(new = FALSE,oma=c(0,1,1,1))
plot(dbhs_m~ages, type = "l" , lty=1, col=1, lwd=3, bty="l", xaxt="n", yaxt="n", xlim=xlim, ylim=ylim, axes=TRUE, las=2, ...)
axis(1, ages, las=1)
axis(2, las=2)
for (i in 1:ncol(dat)) {
par(new = TRUE)
xmin <- as.numeric(colnames(dat)[i])
ymax <- xmin + 1
ser <- as.vector(dat[,i])   #putting right and left sides of rectangles
ser <- ser/maxscale * plot_scale    #scaleing... sometimes it is nice make things bigger or smaller
if(sum(abs(ser)) != 0){          #if there is lf data at time i make plot
rectplot(ser,bins=as.numeric(rownames(dat)),xmin=xmin,xmax=xmax,ylim=ylim, "blue", "grey")#make bar plot
}
}
}
### Example with fake data
ages <- c(1:20)
max_dbh <- 50
plot_scale <- 0.7
dbhs_m <- (1-dlnorm(ages)^0.1) * max_dbh
breaks <- seq(0, max_dbh, 1)
dat <- lapply(dbhs_m, function(x) {
val <- rnorm(100, mean = x, sd = 4)
val[val < 0] <- 0
as.vector(table(cut(val, breaks)))
})
example <- do.call(cbind, dat)
dimnames(example) <- list(breaks[-1], ages)
histo_line(example, xlab="Age", ylab="DBH", main="DBH example")
#### ----------------- Functions ------------------------ #####
rectplot <- function(ser,bins,xmin,xmax,ylim,barcol1,barcol2){
#This function puts the rectangles in the histo_line function
YL=bins[1:(length(bins))]-(bins[2]-bins[1])/2           #lower y limits
YU=bins[1:(length(bins))]+(bins[2]-bins[1])/2           #upper y limits
XL=ser+xmin                         #nonzero x limits may be right or left!
XR=ser*0+xmin                       #axis x limits
col1 <- which(XL-xmin<=0)#switch peaks and valley colors
col2 <- which(XL-xmin>=0)
rect(XL[col1],YL[col1],XR[col1],YU[col1],col=barcol1)#make valley boxes
rect(XL[col2],YL[col2],XR[col2],YU[col2],col=barcol2)#make peak boxes
}
histo_line <- function(dat, ...) {
#' Plot function
#'
#' @param dat A matrix, with bins as rows, time as columns and frequency as values.
#' rownames should be the name of the bins and colnames the name of the time (tested with age, not dates).
#' Both must be numeric.
#' @param ... Additional arguments passed to plot (as xlab, ylab, main)
#'
#' @details
#' https://science.nature.nps.gov/im/datamgmt/statistics/r/rcourse/session1.cfm
#' https://github.com/AaronGreenberg/ELEFAN/blob/master/R/LF_plots.R
#' https://rawgit.com/tokami/TropFishR/master/inst/doc/tutorial.html
xlim <- c(0, max(as.numeric(colnames(dat))) + 1)
ylim <- c(1, max(as.numeric(rownames(dat))) + 1)
maxscale <- (max(dat)/sort(unique(as.vector(dat)))[2]*1.1)
par(new = FALSE,oma=c(0,1,1,1))
plot(c(0, dbhs_m)~c(0, ages), type = "l" , lty=1, col=1, lwd=3, bty="l", xaxt="n", yaxt="n", xlim=xlim, ylim=ylim, axes=TRUE, las=2, ...)
axis(1, ages, las=1)
axis(2, las=2)
for (i in 1:ncol(dat)) {
par(new = TRUE)
xmin <- as.numeric(colnames(dat)[i])
ymax <- xmin + 1
ser <- as.vector(dat[,i])   #putting right and left sides of rectangles
ser <- ser/maxscale * plot_scale    #scaleing... sometimes it is nice make things bigger or smaller
if(sum(abs(ser)) != 0){          #if there is lf data at time i make plot
rectplot(ser,bins=as.numeric(rownames(dat)),xmin=xmin,xmax=xmax,ylim=ylim, "blue", "grey")#make bar plot
}
}
}
histo_line(example, xlab="Age", ylab="DBH", main="DBH example")
dbhs_m
rm(list=ls())
#### ----------------- Functions ------------------------ #####
rectplot <- function(ser,bins,xmin,xmax,ylim,barcol1,barcol2){
#This function puts the rectangles in the histo_line function
YL=bins[1:(length(bins))]-(bins[2]-bins[1])/2           #lower y limits
YU=bins[1:(length(bins))]+(bins[2]-bins[1])/2           #upper y limits
XL=ser+xmin                         #nonzero x limits may be right or left!
XR=ser*0+xmin                       #axis x limits
col1 <- which(XL-xmin<=0)#switch peaks and valley colors
col2 <- which(XL-xmin>=0)
rect(XL[col1],YL[col1],XR[col1],YU[col1],col=barcol1)#make valley boxes
rect(XL[col2],YL[col2],XR[col2],YU[col2],col=barcol2)#make peak boxes
}
histo_line <- function(dat, variable...) {
#' Plot function
#'
#' @param dat A matrix, with bins as rows, time as columns and frequency as values.
#' rownames should be the name of the bins and colnames the name of the time (tested with age, not dates).
#' Both must be numeric.
#' @param variable A vector with the average to be ploted as line (with the same length as dat columns)
#' @param time
#' @param ... Additional arguments passed to plot (as xlab, ylab, main)
#'
#' @details
#' https://science.nature.nps.gov/im/datamgmt/statistics/r/rcourse/session1.cfm
#' https://github.com/AaronGreenberg/ELEFAN/blob/master/R/LF_plots.R
#' https://rawgit.com/tokami/TropFishR/master/inst/doc/tutorial.html
xlim <- c(0, max(as.numeric(colnames(dat))) + 1)
ylim <- c(1, max(as.numeric(rownames(dat))) + 1)
timex <- as.numeric(colnames(dat))
maxscale <- (max(dat)/sort(unique(as.vector(dat)))[2]*1.1)
par(new = FALSE,oma=c(0,1,1,1))
plot(c(0, variable)~c(0, timex), type = "l" , lty=1, col=1, lwd=3, bty="l", xaxt="n", yaxt="n", xlim=xlim, ylim=ylim, axes=TRUE, las=2, ...)
axis(1, timex, las=1)
axis(2, las=2)
for (i in 1:ncol(dat)) {
par(new = TRUE)
xmin <- as.numeric(colnames(dat)[i])
ymax <- xmin + 1
ser <- as.vector(dat[,i])   #putting right and left sides of rectangles
ser <- ser/maxscale * p_scale    #scaleing... sometimes it is nice make things bigger or smaller
if(sum(abs(ser)) != 0){          #if there is lf data at time i make plot
rectplot(ser, bins=as.numeric(rownames(dat)),xmin=xmin,xmax=xmax,ylim=ylim, "blue", "grey")#make bar plot
}
}
}
##### --------------------------------------------------- ####
### ------------- Example with fake data
ages <- c(1:20)
max_dbh <- 50
plot_scale <- 0.7
dbhs_m <- (1-dlnorm(ages)^0.1) * max_dbh
breaks <- seq(0, max_dbh, 1)
dat <- lapply(dbhs_m, function(x) {
val <- rnorm(100, mean = x, sd = 4)
val[val < 0] <- 0
as.vector(table(cut(val, breaks)))
})
example <- do.call(cbind, dat)
dimnames(example) <- list(breaks[-1], ages)
histo_line(example, variable=dbhs_m, p_scale=plot_scale, xlab="Age", ylab="DBH", main="DBH example")
rm(list=ls())
#### ----------------- Functions ------------------------ #####
rectplot <- function(ser,bins,xmin,xmax,ylim,barcol1,barcol2){
#This function puts the rectangles in the histo_line function
YL=bins[1:(length(bins))]-(bins[2]-bins[1])/2           #lower y limits
YU=bins[1:(length(bins))]+(bins[2]-bins[1])/2           #upper y limits
XL=ser+xmin                         #nonzero x limits may be right or left!
XR=ser*0+xmin                       #axis x limits
col1 <- which(XL-xmin<=0)#switch peaks and valley colors
col2 <- which(XL-xmin>=0)
rect(XL[col1],YL[col1],XR[col1],YU[col1],col=barcol1)#make valley boxes
rect(XL[col2],YL[col2],XR[col2],YU[col2],col=barcol2)#make peak boxes
}
histo_line <- function(dat, variable, p_scale=1,...) {
#' Plot function
#'
#' @param dat A matrix, with bins as rows, time as columns and frequency as values.
#' rownames should be the name of the bins and colnames the name of the time (tested with age, not dates).
#' Both must be numeric.
#' @param variable A vector with the average to be ploted as line (with the same length as dat columns).
#' @param p_scale A scalar, indicating the scale to be used for the bar plots (increase o decrease the size).
#' @param ... Additional arguments passed to plot (as xlab, ylab, main).
#'
#' @details
#' https://science.nature.nps.gov/im/datamgmt/statistics/r/rcourse/session1.cfm
#' https://github.com/AaronGreenberg/ELEFAN/blob/master/R/LF_plots.R
#' https://rawgit.com/tokami/TropFishR/master/inst/doc/tutorial.html
xlim <- c(0, max(as.numeric(colnames(dat))) + 1)
ylim <- c(1, max(as.numeric(rownames(dat))) + 1)
timex <- as.numeric(colnames(dat))
maxscale <- (max(dat)/sort(unique(as.vector(dat)))[2]*1.1)
par(new = FALSE,oma=c(0,1,1,1))
plot(c(0, variable)~c(0, timex), type = "l" , lty=1, col=1, lwd=3, bty="l", xaxt="n", yaxt="n", xlim=xlim, ylim=ylim, axes=TRUE, las=2, ...)
axis(1, timex, las=1)
axis(2, las=2)
for (i in 1:ncol(dat)) {
par(new = TRUE)
xmin <- as.numeric(colnames(dat)[i])
ymax <- xmin + 1
ser <- as.vector(dat[,i])   #putting right and left sides of rectangles
ser <- ser/maxscale * p_scale    #scaleing... sometimes it is nice make things bigger or smaller
if(sum(abs(ser)) != 0){          #if there is lf data at time i make plot
rectplot(ser, bins=as.numeric(rownames(dat)),xmin=xmin,xmax=xmax,ylim=ylim, "blue", "grey")#make bar plot
}
}
}
##### --------------------------------------------------- ####
### ------------- Example with fake data
ages <- c(1:20)
max_dbh <- 50
plot_scale <- 0.7
dbhs_m <- (1-dlnorm(ages)^0.1) * max_dbh
breaks <- seq(0, max_dbh, 1)
dat <- lapply(dbhs_m, function(x) {
val <- rnorm(100, mean = x, sd = 4)
val[val < 0] <- 0
as.vector(table(cut(val, breaks)))
})
example <- do.call(cbind, dat)
dimnames(example) <- list(breaks[-1], ages)
histo_line(example, variable=dbhs_m, p_scale=plot_scale, xlab="Age", ylab="DBH", main="DBH example")
example
is.na(example)
example[example == 0] <- NA
example
histo_line(example, variable=dbhs_m, p_scale=plot_scale, xlab="Age", ylab="DBH", main="DBH example")
histo_line <- function(dat, variable, p_scale=1,...) {
#' Plot function
#'
#' @param dat A matrix, with bins as rows, time as columns and frequency as values.
#' rownames should be the name of the bins and colnames the name of the time (tested with age, not dates).
#' Both must be numeric.
#' @param variable A vector with the average to be ploted as line (with the same length as dat columns).
#' @param p_scale A scalar, indicating the scale to be used for the bar plots (increase o decrease the size).
#' @param ... Additional arguments passed to plot (as xlab, ylab, main).
#'
#' @details
#' https://science.nature.nps.gov/im/datamgmt/statistics/r/rcourse/session1.cfm
#' https://github.com/AaronGreenberg/ELEFAN/blob/master/R/LF_plots.R
#' https://rawgit.com/tokami/TropFishR/master/inst/doc/tutorial.html
xlim <- c(0, max(as.numeric(colnames(dat))) + 1)
ylim <- c(1, max(as.numeric(rownames(dat))) + 1)
timex <- as.numeric(colnames(dat))
maxscale <- (max(dat)/sort(unique(as.vector(dat)))[2]*1.1)
par(new = FALSE,oma=c(0,1,1,1))
plot(c(0, variable)~c(0, timex), type = "l" , lty=1, col=1, lwd=3, bty="l", xaxt="n", yaxt="n", xlim=xlim, ylim=ylim, axes=TRUE, las=2, ...)
axis(1, timex, las=1)
axis(2, las=2)
for (i in 1:ncol(dat)) {
par(new = TRUE)
xmin <- as.numeric(colnames(dat)[i])
ymax <- xmin + 1
ser <- as.vector(dat[,i])   #putting right and left sides of rectangles
ser <- ser/maxscale * p_scale    #scaleing... sometimes it is nice make things bigger or smaller
if(sum(abs(ser), na.rm=T) != 0){          #if there is lf data at time i make plot
rectplot(ser, bins=as.numeric(rownames(dat)),xmin=xmin,xmax=xmax,ylim=ylim, "blue", "grey")#make bar plot
}
}
}
histo_line(example, variable=dbhs_m, p_scale=plot_scale, xlab="Age", ylab="DBH", main="DBH example")
histo_line(example, variable=dbhs_m, p_scale=plot_scale, xlab="Age", ylab="DBH", main="DBH example")
?rect
rectplot <- function(ser,bins,xmin,xmax,ylim,barcol1,barcol2){
#This function puts the rectangles in the histo_line function
YL=bins[1:(length(bins))]-(bins[2]-bins[1])/2           #lower y limits
YU=bins[1:(length(bins))]+(bins[2]-bins[1])/2           #upper y limits
XL=ser+xmin                         #nonzero x limits may be right or left!
XR=ser*0+xmin                       #axis x limits
col1 <- which(XL-xmin<=0)#switch peaks and valley colors
col2 <- which(XL-xmin>=0)
col3 <- which(XL-xmin==0)
rect(XL[col1],YL[col1],XR[col1],YU[col1],col=barcol1)#make valley boxes
rect(XL[col2],YL[col2],XR[col2],YU[col2],col=barcol2)#make peak boxes
rect(XL[col2],YL[col2],XR[col2],YU[col2],col="white")#make white line
}
ages <- c(1:20)
max_dbh <- 50
plot_scale <- 0.7
dbhs_m <- (1-dlnorm(ages)^0.1) * max_dbh
breaks <- seq(0, max_dbh, 1)
dat <- lapply(dbhs_m, function(x) {
val <- rnorm(100, mean = x, sd = 4)
val[val < 0] <- 0
as.vector(table(cut(val, breaks)))
})
example <- do.call(cbind, dat)
dimnames(example) <- list(breaks[-1], ages)
histo_line(example, variable=dbhs_m, p_scale=plot_scale, xlab="Age", ylab="DBH", main="DBH example")
rectplot <- function(ser,bins,xmin,xmax,ylim,barcol1,barcol2){
#This function puts the rectangles in the histo_line function
YL=bins[1:(length(bins))]-(bins[2]-bins[1])/2           #lower y limits
YU=bins[1:(length(bins))]+(bins[2]-bins[1])/2           #upper y limits
XL=ser+xmin                         #nonzero x limits may be right or left!
XR=ser*0+xmin                       #axis x limits
col1 <- which(XL-xmin<=0)#switch peaks and valley colors
col2 <- which(XL-xmin>=0)
col3 <- which(XL-xmin==0)
rect(XL[col1],YL[col1],XR[col1],YU[col1],col=barcol1)#make valley boxes
rect(XL[col2],YL[col2],XR[col2],YU[col2],col=barcol2)#make peak boxes
rect(XL[col3],YL[col3],XR[col3],YU[col3],col="white")#make white line
}
histo_line(example, variable=dbhs_m, p_scale=plot_scale, xlab="Age", ylab="DBH", main="DBH example")
?rect
rectplot <- function(ser,bins,xmin,xmax,ylim,barcol1,barcol2){
#This function puts the rectangles in the histo_line function
YL=bins[1:(length(bins))]-(bins[2]-bins[1])/2           #lower y limits
YU=bins[1:(length(bins))]+(bins[2]-bins[1])/2           #upper y limits
XL=ser+xmin                         #nonzero x limits may be right or left!
XR=ser*0+xmin                       #axis x limits
col1 <- which(XL-xmin<=0)#switch peaks and valley colors
col2 <- which(XL-xmin>=0)
# col3 <- which(XL-xmin==0)
rect(XL[col1],YL[col1],XR[col1],YU[col1],col=barcol1, border="white")#make valley boxes
rect(XL[col2],YL[col2],XR[col2],YU[col2],col=barcol2, border="white")#make peak boxes
# rect(XL[col3],YL[col3],XR[col3],YU[col3],col="white")#make white line
}
histo_line(example, variable=dbhs_m, p_scale=plot_scale, xlab="Age", ylab="DBH", main="DBH example")
rectplot <- function(ser,bins,xmin,xmax,ylim,barcol1,barcol2){
#This function puts the rectangles in the histo_line function
YL=bins[1:(length(bins))]-(bins[2]-bins[1])/2           #lower y limits
YU=bins[1:(length(bins))]+(bins[2]-bins[1])/2           #upper y limits
XL=ser+xmin                         #nonzero x limits may be right or left!
XR=ser*0+xmin                       #axis x limits
col1 <- which(XL-xmin<=0)#switch peaks and valley colors
col2 <- which(XL-xmin>=0)
# col3 <- which(XL-xmin==0)
rect(XL[col1],YL[col1],XR[col1],YU[col1],col=barcol1, border=NA)#make valley boxes
rect(XL[col2],YL[col2],XR[col2],YU[col2],col=barcol2, border=NA)#make peak boxes
# rect(XL[col3],YL[col3],XR[col3],YU[col3],col="white")#make white line
}
histo_line(example, variable=dbhs_m, p_scale=plot_scale, xlab="Age", ylab="DBH", main="DBH example")
ages <- c(1:20)
max_dbh <- 50
plot_scale <- 0.7
dbhs_m <- (1-dlnorm(ages)^0.1) * max_dbh
breaks <- seq(0, max_dbh, 1)
dat <- lapply(dbhs_m, function(x) {
val <- rnorm(10000, mean = x, sd = 4)
val[val < 0] <- 0
as.vector(table(cut(val, breaks)))
})
example <- do.call(cbind, dat)
dimnames(example) <- list(breaks[-1], ages)
histo_line(example, variable=dbhs_m, p_scale=plot_scale, xlab="Age", ylab="DBH", main="DBH example")
ages <- c(1:20)
max_dbh <- 50
plot_scale <- 0.7
dbhs_m <- (1-dlnorm(ages)^0.1) * max_dbh
breaks <- seq(0, max_dbh, 1)
dat <- lapply(dbhs_m, function(x) {
val <- rnorm(100, mean = x, sd = 4)
val[val < 0] <- 0
as.vector(table(cut(val, breaks)))
})
example <- do.call(cbind, dat)
dimnames(example) <- list(breaks[-1], ages)
histo_line(example, variable=dbhs_m, p_scale=plot_scale, xlab="Age", ylab="DBH", main="DBH example")
rectplot <- function(ser,bins,xmin,xmax,ylim,barcol1,barcol2){
#This function puts the rectangles in the histo_line function
YL=bins[1:(length(bins))]-(bins[2]-bins[1])/2           #lower y limits
YU=bins[1:(length(bins))]+(bins[2]-bins[1])/2           #upper y limits
XL=ser+xmin                         #nonzero x limits may be right or left!
XR=ser*0+xmin                       #axis x limits
col1 <- which(XL-xmin<0)#switch peaks and valley colors
col2 <- which(XL-xmin>0)
col3 <- which(XL-xmin==0)
rect(XL[col1],YL[col1],XR[col1],YU[col1],col=barcol1, border=NA)#make valley boxes
rect(XL[col2],YL[col2],XR[col2],YU[col2],col=barcol2, border=NA)#make peak boxes
rect(XL[col3],YL[col3],XR[col3],YU[col3],col="white")#make white line
}
rectplot <- function(ser,bins,xmin,xmax,ylim,barcol1,barcol2){
#This function puts the rectangles in the histo_line function
YL=bins[1:(length(bins))]-(bins[2]-bins[1])/2           #lower y limits
YU=bins[1:(length(bins))]+(bins[2]-bins[1])/2           #upper y limits
XL=ser+xmin                         #nonzero x limits may be right or left!
XR=ser*0+xmin                       #axis x limits
col1 <- which(XL-xmin<0)#switch peaks and valley colors
col2 <- which(XL-xmin>0)
col3 <- which(XL-xmin==0)
rect(XL[col1],YL[col1],XR[col1],YU[col1],col=barcol1)#make valley boxes
rect(XL[col2],YL[col2],XR[col2],YU[col2],col=barcol2)#make peak boxes
rect(XL[col3],YL[col3],XR[col3],YU[col3],col="white",border=NA)#make white line
}
histo_line(example, variable=dbhs_m, p_scale=plot_scale, xlab="Age", ylab="DBH", main="DBH example")
ages <- c(1:20)
max_dbh <- 50
plot_scale <- 0.7
dbhs_m <- (1-dlnorm(ages)^0.1) * max_dbh
breaks <- seq(0, max_dbh, 1)
dat <- lapply(dbhs_m, function(x) {
val <- rnorm(10000, mean = x, sd = 4)
val[val < 0] <- 0
as.vector(table(cut(val, breaks)))
})
example <- do.call(cbind, dat)
dimnames(example) <- list(breaks[-1], ages)
histo_line(example, variable=dbhs_m, p_scale=plot_scale, xlab="Age", ylab="DBH", main="DBH example")
library(data.table)
require(data.table)
names(ChickWeight) <- tolower(names(ChickWeight))
DT <- melt(as.data.table(ChickWeight), id=2:4) # calls melt.data.table
DT
dcast(DT, time ~ variable, fun=mean)
ChickWeight
head(ChickWeight)
DT
dcast(DT, diet ~ variable, fun=mean)
dcast(DT, diet+chick ~ time, drop=FALSE)
dcast(DT, diet+chick ~ time, drop=FALSE, fill=0)
DT
seq_along
?seq_along
rm(list=ls())
library(lpSolveAPI)
library(lpSolve)
library(numbers)
# La estructura arbol viene del taper; en el fondo son los "bins" definidos por el minimo comun divisor. Para este ejemplo es 1.5
# por lo que cada celda de la estructura, representa 1.5m de altura (como se puede apreciar en el nombre), partiendo de 0.1m
arbol <- structure(c(37.03, 27.92, 26.49, 25.01, 23.47, 21.84, 20.12,
18.28, 16.27, 14.03, 11.41, 8.42, 5.37, 1.94, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0), .Names = c("0.1", "1.6", "3.1", "4.6",
"6.1", "7.6", "9.1", "10.6", "12.1", "13.6", "15.1", "16.6",
"18.1", "19.6", "21.1", "22.6", "24.1", "25.6", "27.1", "28.6",
"30.1", "31.6", "33.1", "34.6", "36.1", "37.6"))
products <- data.frame(name=c("p1", "p2", "p3", "p4", "p5", "p6"), length=c(6, 4.5, 6, 3, 4.5, 6),
value=c(200, 125, 150, 90, 100, 115),
priority=c(1, 3, 2, 6, 5, 4), sed=c(30, 20, 20, 4, 4, 4),
stringsAsFactors = F)
products$frag <- products$length / (mGCD(products$length*100)/100)
# para todos despues
tlist <- list()
for (i in 1:nrow(products)) {
tlist[i] <- sum(arbol >= products$sed[i])
}
tlist <- do.call("c", tlist)  # numero de "bins" disponibles por producto (que cumplen el diametro minimo)
val <- products$value         # valor de cada producto
nproducts <- nrow(products)   # numero de productos
lp2 <- make.lp(nproducts, nproducts)  # Inicializar LP
lp.control(lp2, sense='max')          # Maximizar
set.constr.type(lp2, rep(1, nproducts), 1:nproducts)  # Asignar todas las restricciones a menor igual
set.constr.value(lp2, rhs=tlist, constraints=1:nproducts)     # Asignar todas las restricciones al numero maximo de "bins" por producto
set.row(lp2, 0, val)                          # Funcion a optimizar (precio x producto)
set.type(lp2, 1:nproducts, "integer")         # Solucion debe ser entera
rest_mat <- matrix(rep(products$frag, each=nproducts), nrow=nproducts)  # Matriz de restricciones; es simplemente cuantos "bins" ocupa cada producto, repetido segun el numero de productos
idx <- setNames(c(which(c(diff(products$sed), 0) != 0), nproducts), unique(products$sed))
idx <- idx[as.character(products$sed)]
for (i in 1:nproducts) {
# Para cada fila se agrega una restriccion por producto; en resumen, lo que hace es ir reduciendo el numero de "bins" disponibles para los productos menores, en base a los productos mayores
set.row(lp2, i, rest_mat[i, 1:idx[i]], indices=1:idx[i])
}
tlist
val
install.packages("rJava")
library("rJava", lib.loc="~/R/win-library/3.4")
detach("package:rJava", unload=TRUE)
install.packages("foreign")
install.packages("readxl")
install.packages("data.table")
install.packages("lpSolve")
install.packages("foreach")
install.packages("numbers")
install.packages("plyr")
install.packages("rbenchmark")
install.packages("matrixStats")
install.packages("rmarkdown")
library(mvpart)
install.packages("C:/Users/Usuario/Desktop/mvpart_1.1-1.zip", repos = NULL, type = "win.binary")
library(mvpart)
library(profvis)
profvis({
data(diamonds, package = "ggplot2")
plot(price ~ carat, data = diamonds)
m <- lm(price ~ carat, data = diamonds)
abline(m, col = "red")
})
library(magick)
library(qrencoder)
setwd('C:/Users/Usuario/Desktop/invitacion/tickets/')
qrI <- "qr.png"
xp <- 50
yp <- 45
xjump <- 255
yjump <- 150
xshift <- 0
yshift <- 0
xqr <- 770
yqr <- 1192
start <- 111
end <- 200
comb <- expand.grid(y=seq(yp, by=yjump, length.out = 11), x=seq(xp, by=xjump, length.out = 5))
counter <- start
while (counter <= end ) {
tic <- image_read('tickets.png')
for (p in 1:nrow(comb)) {
tic <- image_annotate(tic, paste0("F - ", sprintf("%05d", counter)), size = 50, col = "red", location=paste0("+", comb[p, 'x'], "+", comb[p, 'y']), font = 'agency-fb')
counter <- counter + 1
}
image_write(tic, paste0('tickets_F_', sprintf("%05d", counter - 1), '.png'), format="png")
rm(tic)
print(counter)
}
